<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="gof.knowledgemirror.dao.UserInformationDao" >




    <!-- 从数据库中取出该用户个人信息 -->
    <select id="selectInformationByUserName" resultType="gof.knowledgemirror.pojos.UserEntity">
        SELECT user_name,user_password,user_email,user_borndate,user_evalution,user_education,user_experience,user_honor,user_skill
        FROM user
        WHERE user_name=#{arg0}
    </select>




    <!-- 修改该用户的个人信息 -->
    <!--<update id="updateInformationByUserName" parameterType="gof.knowledgemirror.pojos.UserEntity">

        &lt;!&ndash;通过 People 的name 去更新 People 的email，并获取被更新纪录的id
            此处的 keyProperty＝’id’ 是指将查询出来的id 映射到传入updateByUserName 的people 的id 。类型为int
            因为可能查到name 以后可能会修改name 所以order=’BEFORE’ 要在执行update之前进行查询，并把id返回出来。
        &ndash;&gt;
        <selectKey keyProperty='id' resultType='int' order='AFTER'>
            SELECT
            (select id FROM USER
            WHERE
            user_name = #{user_name})id
            from DUAL
        </selectKey>

        /*此 SELECT 就是为了获取 被更新的 user 的id 外边包装一个虚表查询是当 name = #{name} 查询不到纪录时不会报空纪录，会返回 null ，这个就很关键了。

        当返回空记录的时候 mybatis会报错，说不能转换成 int 型。*/

        UPDATE user
    SET user_email=#{user_email},user_borndate=#{user_borndate},user_evalution=#{user_evalution},
    user_education=#{user_education},user_experience=#{user_experience},user_honor=#{user_honor},user_skill=#{user_skill}
    WHERE user_name=#{user_name}


</update>-->

    <update id="updateInformationByUserName" parameterType="gof.knowledgemirror.pojos.UserEntity" >
        UPDATE user
        SET user_email=#{user_email},user_borndate=#{user_borndate},user_evalution=#{user_evalution},
        user_education=#{user_education},user_experience=#{user_experience},user_honor=#{user_honor},user_skill=#{user_skill}
        WHERE user_name=#{user_name}
    </update>

</mapper>